{"version":3,"sources":["hok/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","event","target","value","onBlur","updateStatus","autoFocus","type","onDoubleClick","ProfileInfo","profile","className","classes","content","src","alt","photos","large","Preloader","Post","item","message","likesCount","MyPosts","memo","postsElements","profilePage","posts","map","post","key","id","AddPostFormRedux","onSubmit","values","addPost","newPostBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfileThunkCreator","getUserStatusThunkCreator","updateUserStatusThunkCreator","compose","withRouter"],"mappings":"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","file":"static/js/3.463c23e0.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<mapStateToPropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to=\"/login\"/>;\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2WU44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3fzNx\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = (): void => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onChangeStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <div>\r\n                        <input onChange={onChangeStatus} onBlur={deactivateEditMode} autoFocus type=\"text\"\r\n                               value={status}/>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}>{status}</span>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: PropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.content}>\r\n                <img src=\"https://cdn.pixabay.com/photo/2016/10/29/23/48/animals-1782013__340.png\" alt=\"\"/>\r\n            </div>\r\n            <img src={profile.photos.large} alt=\"profile\"/>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://th.bing.com/th/id/OIP.zdpQB2oj-lMHpr6h7o8s6QHaHa?w=227&h=211&c=7&o=5&dpr=1.4&pid=1.7\"\r\n                 alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport {ProfilePageType} from '../../../redux/store';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators';\r\nimport { Textarea } from '../../common/FormControls/FormControls';\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    let state = props.profilePage;\r\n\r\n    let postsElements = state.posts.map(post => <Post message={post.message} likesCount={post.likesCount}\r\n                                                      key={post.id}/>);\r\n\r\n    const addNewPost = (values: PostFormType) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div>New post</div>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n});\r\n\r\ntype PostFormType = {\r\n    newPostBody: string\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<PostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostBody'} placeholder=\"Enter your message\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<PostFormType>({\r\n    form: 'postAddMessageForm'\r\n})(AddPostForm);\r\n\r\nexport default MyPosts;\r\n","import MyPosts from './MyPosts';\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\nimport {ProfilePageType} from '../../../redux/store';\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n}\r\n\r\ntype MapStateType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    PostType,\r\n    ProfileType, updateUserStatusThunkCreator\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hok/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype MSTPType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: string | number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MDTPType = {\r\n    getUserProfileThunkCreator: (userId: string) => void\r\n    getUserStatusThunkCreator: (userId: string) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n}\r\n\r\ntype ProfilePropsType = MSTPType & MDTPType\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId);\r\n        this.props.getUserStatusThunkCreator(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} updateStatus={this.props.updateUserStatusThunkCreator}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTPType => ({\r\n    profile: state.profilePage.profile,\r\n    posts: state.profilePage.posts,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunkCreator, getUserStatusThunkCreator, updateUserStatusThunkCreator}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}