{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","classes","header","src","Navbar","nav","item","active","href","Post","props","alt","message","likesCount","MyPosts","Profile","content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,kBCAjFD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,+KCSVC,EAPA,WACX,OACI,4BAAQC,UAAWC,IAAQC,QACvB,yBAAKC,IAAI,mG,gBCQNC,EAXA,WACX,OACI,yBAAKJ,UAAWC,IAAQI,KACpB,yBAAKL,UAAS,UAAKC,IAAQK,KAAb,oBAA6BL,IAAQM,SAAU,uBAAGC,KAAK,YAAR,YAC7D,yBAAKR,UAAWC,IAAQK,MAAM,uBAAGE,KAAK,YAAR,aAC9B,yBAAKR,UAAWC,IAAQK,MAAM,uBAAGE,KAAK,IAAR,SAC9B,yBAAKR,UAAWC,IAAQK,MAAM,uBAAGE,KAAK,IAAR,UAC9B,yBAAKR,UAAWC,IAAQK,MAAM,uBAAGE,KAAK,IAAR,e,gCCW3BC,EAbF,SAACC,GACV,OACI,yBAAKV,UAAWC,IAAQK,MACpB,yBAAKH,IAAI,+FAA+FQ,IAAI,KAC3GD,EAAME,QACP,6BACI,sCACCF,EAAMG,cCGRC,EAdC,WACZ,OACI,6BACI,6BACI,wCACA,oCAGJ,yCACA,kBAAC,EAAD,CAAMF,QAAQ,mBAAmBC,WAAW,MAC5C,kBAAC,EAAD,CAAMD,QAAQ,sBAAsBC,WAAW,SCC5CE,EAXC,WACZ,OACI,6BACI,yBAAKf,UAAWC,IAAQe,SACpB,yBAAKb,IAAI,0EAA0EQ,IAAI,MAE3F,kDACA,kBAAC,EAAD,QCUGM,MAdf,WACI,OACI,yBAAKjB,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,uBAEX,kBAAC,EAAD,SCHIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvB,c","file":"static/js/main.9fa65756.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3eI4X\",\"item\":\"Navbar_item__r-Sih\",\"active\":\"Navbar_active__1Okcc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3KfAi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2QphM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3fzNx\"};","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src=\"https://th.bing.com/th/id/OIP.5RuWHDPkCpCa6_CKz6jszQHaHa?w=166&h=166&c=7&o=5&dpr=1.4&pid=1.7\"/>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} + \" \" + ${classes.active}`}><a href=\"/profile\">Profile</a></div>\r\n            <div className={classes.item}><a href=\"/dialogs\">Messages</a></div>\r\n            <div className={classes.item}><a href=\"\">News</a></div>\r\n            <div className={classes.item}><a href=\"\">Music</a></div>\r\n            <div className={classes.item}><a href=\"\">Settings</a></div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from \"react\";\r\nimport classes from \"./Post.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nconst Post = (props:PropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://th.bing.com/th/id/OIP.zdpQB2oj-lMHpr6h7o8s6QHaHa?w=227&h=211&c=7&o=5&dpr=1.4&pid=1.7\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>My posts</h3>\r\n                <textarea></textarea>\r\n\r\n            </div>\r\n            <div>New post</div>\r\n            <Post message=\"Hi, how are you?\" likesCount=\"4\" />\r\n            <Post message=\"It's my first post.\" likesCount=\"16\" />\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import React from \"react\";\r\nimport classes from \"./Profile.module.css\"\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            <div className={classes.content}>\r\n                <img src=\"https://cdn.pixabay.com/photo/2016/10/29/23/48/animals-1782013__340.png\" alt=\"\"/>\r\n            </div>\r\n            <div>Ava + description</div>\r\n            <MyPosts />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from './components/Dialogs/Dialogs';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <Navbar/>\r\n\r\n            <div className=\"app-wrapper-content\">\r\n                {/*<Dialogs />*/}\r\n                <Profile />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}