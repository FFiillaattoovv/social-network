{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hok/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","DialogItem","path","id","className","classes","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","key","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","DialogsContainer","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8ICQ7MC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAA8B,IACxDC,EADuD,4JAEzD,WAAU,IAAD,EACwBC,KAAKC,MAA7BN,EADA,EACAA,OAAWO,EADX,0BAEL,OAAKP,EACE,kBAACG,EAAcI,GADF,kBAAC,IAAD,CAAUC,GAAG,eAJoB,GAC7BC,IAAMN,WAUtC,OAF+BO,YAAQZ,EAARY,CAAyBN,K,sFCV7CO,EATI,SAACL,GAChB,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,yBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,QAC3C,kBAAC,IAAD,CAAST,GAAII,GAAON,EAAMY,QCCvBC,EANC,SAACb,GACb,OACI,yBAAKQ,UAAWC,IAAQK,SAAUd,EAAMc,U,kCCyC1CC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAA2B,CACnDC,KAAM,wBADkBD,EAdyC,SAAClB,GAClE,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAM,iBAAkBa,YAAY,qBACzDC,SAAU,CAACC,IAAUZ,MAEhC,6BACI,6CAUDa,EAnDC,SAAC5B,GACb,IAAIP,EAAQO,EAAM6B,YACdC,EAAkBrC,EAAMsC,QAAQC,KAAI,SAACtB,GAAD,OAAwB,kBAAC,EAAD,CAAYE,KAAMF,EAAOE,KACbL,GAAIG,EAAOH,GACX0B,IAAKvB,EAAOH,QACpF2B,EAAmBzC,EAAM0C,SAASH,KAAI,SAAClB,GAAD,OAA0B,kBAAC,EAAD,CAASA,QAASA,EAAQA,QACjBmB,IAAKnB,EAAQP,QAM1F,OACI,yBAAKC,UAAWC,IAAQsB,SACpB,yBAAKvB,UAAWC,IAAQ2B,cACnBN,GAEL,yBAAKtB,UAAWC,IAAQ0B,UACpB,6BAAMD,GACN,6BACI,kBAACjB,EAAD,CAAqBG,SAZf,SAACiB,GACnBrC,EAAMsC,YAAYD,EAAOE,uB,iCCQ3BC,EAAmBC,YACrBrC,aAzBkB,SAACX,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,YACnBnC,OAAQD,EAAME,KAAKD,WAIF,SAACgD,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,SAgBpC3C,IAFqB6C,CAGvBb,GAEaY","file":"static/js/4.08558982.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__39U9X\",\"dialogsItems\":\"Dialogs_dialogsItems__2hZab\",\"active\":\"Dialogs_active__3cAuP\",\"dialog\":\"Dialogs_dialog__27tro\",\"messages\":\"Dialogs_messages__6ujkd\",\"message\":\"Dialogs_message__1dv_s\"};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<mapStateToPropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to=\"/login\"/>;\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectRedirectComponent;\r\n}","import classes from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {DialogType} from '../../../redux/store';\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import classes from '../Dialogs.module.css';\r\nimport React from 'react';\r\nimport {MessageType} from '../../../redux/store';\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPageType, DialogType, MessageType} from '../../redux/store';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormControls/FormControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators';\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogsPageType,\r\n    isAuth: boolean\r\n    sendMessage: (newMessageBody: string) => void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map((dialog: DialogType) => <DialogItem name={dialog.name}\r\n                                                                                id={dialog.id}\r\n                                                                                key={dialog.id}/>);\r\n    let messagesElements = state.messages.map((message: MessageType) => <Message message={message.message}\r\n                                                                                 key={message.id}/>);\r\n\r\n    const addNewMessage = (values: MessageFormType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} placeholder=\"Enter your message\"\r\n                       validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageFormType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import Dialogs from './Dialogs';\r\nimport {sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {DialogsPageType} from '../../redux/store';\r\nimport {withAuthRedirect} from '../../hok/withAuthRedirect';\r\nimport React from 'react';\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\ntype MapStateType = {\r\n    dialogsPage: DialogsPageType,\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}